import json    
import random  
from collections import namedtuple

"""This is setting my named tuple"""
Story = namedtuple("Story", ["title", "template", "placeholders"])

def _load_all_stories_from_json(filename="stories.json"):
    """Loads all Mad Libs stories from a JSON file and converts them to Story namedtuples."""
    loaded_stories = [] 
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, list):
                for i, item_dict in enumerate(data): # item_dict is each dictionary from JSON
                    if isinstance(item_dict, dict):
                        # Extract data, providing defaults if keys are missing,
                        # ensuring our namedtuple gets all its fields.
                        title = item_dict.get("title", f"Untitled Story {i+1}")
                        template = item_dict.get("template")
                        placeholders = item_dict.get("placeholders")

                        if template is not None and placeholders is not None and isinstance(placeholders, list):
                            # Create a Story namedtuple instance
                            loaded_stories.append(Story(title=title, template=template, placeholders=placeholders))
                        else:
                            print(f"Warning: Story at index {i} in '{filename}' is missing 'template' or 'placeholders', or placeholders is not a list. Skipping.")
                    else:
                        print(f"Warning: Item at index {i} in '{filename}' is not a dictionary. Skipping.")
            else:
                print(f"Warning: '{filename}' does not contain a list of story objects.")
    except FileNotFoundError:
        print(f"Error: The stories file '{filename}' was not found. No stories will be loaded.")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{filename}'. Please check its format.")
    except Exception as e:
        print(f"An unexpected error occurred while loading stories: {e}")
    
    return loaded_stories # Return the list of Story namedtuples

ALL_STORIES_DATA = _load_all_stories_from_json()

def select_random_story():
    """Selects a random story (which is a Story namedtuple) from the loaded stories."""
    if not ALL_STORIES_DATA:
        return None 
    return random.choice(ALL_STORIES_DATA)

def get_user_inputs_for_story(placeholders, story_title):
    """User inputs"""
    print(f"\nLet's play: {story_title.upper()}")
    print("*" * 3 + f"This story needs {len(placeholders)} words." + "*" * 3)
    print("\nPlease enter the following words for the story:")

    user_inputs = {}
    for placeholder in placeholders:
        prompt_text = placeholder.replace("_", " ").capitalize()
        while True:
            user_word = input(f"Enter a {prompt_text}: ")
            if user_word.strip():
                break
            else:
                print("Oops! You need to enter a word.")
        user_inputs[placeholder] = user_word
    return user_inputs

def build_and_display_story(template, inputs, title):
    """Assembles and prints the story"""
    print("\n" + "*" * 15 + f" {title.upper()} - YOUR COMPLETED MAD LIB! " + "*" * 15)
    final_story = template.format(**inputs)
    print(final_story)
    return final_story

def handle_save_story(story_text, story_title):
    """Saving the story as a text file"""
    while True:
        save_choice = input("Would you like to save this story to a file? (Y/N): ").upper()
        if save_choice in ['Y', 'N']:
            break
        else:
            print("Invalid input. Please enter 'Y' or 'N'.")

    if save_choice == 'Y':
        safe_title = "".join(c if c.isalnum() or c == '_' else "" for c in story_title.lower().replace(" ", "_"))
        filename_suggestion = f"{safe_title[:20]}_madlibs.txt" if safe_title else "madlibs_story.txt"
        
        while True:
            filename = input(f"Enter a filename (e.g., {filename_suggestion}): ")
            if not filename.strip():
                filename = filename_suggestion
            if not filename.endswith(".txt"):
                filename += ".txt"
            
            try:
                with open(filename, 'w') as f:
                    f.write(f"Title: {story_title}\n")
                    f.write("-" * len(f"Title: {story_title}") + "\n")
                    f.write(story_text)
                    f.write("\n\n---\nGenerated by Beginner MadLibs!")
                print(f"Story successfully saved to {filename}")
                break
            except IOError:
                print(f"Error: Could not save '{filename}'. Try a different name/check permissions.")
            except Exception as e:
                print(f"An unexpected error occurred: {e}. Please try another filename.")